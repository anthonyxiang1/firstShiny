scale_fill_gradient(low="skyblue1", high="royalblue4")
ggplot(projYear, aes(launch_year, count, fill=count)) + geom_bar(stat="identity") +
ggtitle("Projects per Year") + xlab("Year") +
ylab("# of Projects") + scale_x_discrete(limits=c(2009:2018)) +
geom_text(aes(label=paste0(count)), vjust=-0.5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12), legend.position="null") +
scale_fill_gradient(low="skyblue1", high="royalblue4")
View(others)
#success and failure by year launched
state.pct2 <- finalData %>%
filter(year(launched)!="1970", state %in% c("successful", "failed")) %>%
group_by(year=year(launched), state) %>%
summarize(count=n()) %>%
mutate(pct=count/sum(count)) %>%
arrange(desc(state))
#success and failure by year launched
state.pct2 <- finalData %>%
filter(launch_year!="1970", state %in% c("successful", "failed")) %>%
group_by(year=launch_year, state) %>%
summarize(count=n()) %>%
mutate(pct=count/sum(count)) %>%
arrange(desc(state))
ggplot(state.pct2, aes(year, pct, fill=state)) + geom_bar(stat="identity") +
ggtitle("Success vs. Failure Rate by Year Launched") +
xlab("Year") + ylab("Percentage") + scale_x_discrete(limits=c(2009:2017)) +
scale_y_continuous(labels=scales::percent) +
scale_fill_discrete(name="Project Status", breaks=c("successful", "failed"),
labels=c("Success", "Failure")) +
geom_text(aes(label=paste0(round(pct*100,1),"%")), position=position_stack(vjust=0.5),
colour="white", size=5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12), legend.position="bottom",
legend.title=element_text(size=12, face="bold"))
cat.year <- finalData %>%
filter(!year(launched) %in% c("1970", "2018")) %>%
group_by(main_category, year=launch_year) %>%
summarize(count=n())
cat.year <- finalData %>%
filter(!launch_year %in% c("1970", "2018")) %>%
group_by(main_category, year=launch_year) %>%
summarize(count=n())
cat.year2 <- t(matrix(cat.year$count, nrow=9))
colnames(cat.year2) <- c("2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017")
rownames(cat.year2) <- levels(ksdata$main_category)
rownames(cat.year2) <- levels(finalData$main_category)
heatmap.2(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
heatmap(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
heatmap.2(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
install.packages("gplots")
library("gplots")
heatmap.2(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
View(cat.year2)
rownames(cat.year2) <- levels(finalData$main_category)
rownames(cat.year2) <- c("2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017")
rownames(cat.year2) <- c("2","1","2","3","4","2","1","2","3","4","2","1","2","3","4")
heatmap.2(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
rownames(cat.year2) <- c("Bless","1","2","3","4","2","1","2","3","4","2","1","2","3","4")
heatmap.2(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
rownames(cat.year2) <-levels(ksdata$main_category)
rownames(cat.year2) <-levels(finalData$main_category)
levels(finalData$main_category)
rownames(cat.year2) <-finalData$main_category
unique(finalData[,3])
unique(finalData[,4])
rownames(cat.year2) <- c(unique(finalData[,4]))
rownames(cat.year2) <-
b = c(unique(finalData[,4]))
rownames(cat.year2) <-
b <- c(unique(finalData[,4]))
b = c("2009", "2010")
rownames(cat.year2) <-
b <- data.frame(c(unique(finalData[,4])))
rownames(cat.year2) <-
b <- (c(unique(finalData[,4])))
rownames(cat.year2) <- c(unique(finalData[,4]))
rownames(cat.year2) <- c("Food", "Fashion", "Art","Publishing", "Games",
"Design","Technology","Theater","Photography",
"Comics","Crafts","Journalism","Dance","Film & Video","Music")
heatmap.2(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
countries.freq <- finalData %>%
filter(country!='N,0"') %>%
group_by(country) %>%
summarize(count=n())
countries.match <- joinCountryData2Map(countries.freq, joinCode="ISO2", nameJoinColumn="country")
install.packages("rworldmap")
library(rworldmap)
countries.match <- joinCountryData2Map(countries.freq, joinCode="ISO2", nameJoinColumn="country")
mapCountryData(countries.match, nameColumnToPlot="count",
mapTitle="Number of Projects by Country", catMethod="logFixedWidth",
colourPalette="heat")
ggplot(pledged.total, aes(main_category, total/1000000, fill=total)) + geom_bar(stat="identity") +
ggtitle("Total Amount Pledged by Category") + xlab("Project Category") +
ylab("Amount Pledged (USD millions)") +
geom_text(aes(label=paste0("$", round(total/1000000,1))), vjust=-0.5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12, angle=90), legend.position="null") +
scale_fill_gradient(low="skyblue2", high="royalblue2")
ggplot(pledged.avg,
aes(main_category, avg, fill=avg)) + geom_bar(stat="identity") +
ggtitle("Average Amount Pledged per Backer") + xlab("Project Category") +
ylab("Amount Pledged (USD)") +
geom_text(aes(label=paste0("$", round(avg,2))), vjust=-0.5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12, angle=90), legend.position="null") +
scale_fill_gradient(low="skyblue1", high="royalblue4")
ggplot(goal.avg, aes(main_category, avg, fill=avg)) + geom_bar(stat="identity") +
ggtitle("Average Project Goal") + xlab("Project Category") + ylab("Project Goal (USD)") +
geom_text(aes(label=paste0("$", round(avg,0))), vjust=-0.5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12, angle=90), legend.position="null") +
scale_fill_gradient(low="skyblue1", high="royalblue4")
#boxplots as well
ggplot(finalData, aes(main_category, usd_goal_real, fill=main_category)) + geom_boxplot() +
ggtitle("Project Goal vs. Project Category") + xlab("Project Category") +
ylab("Project Goal (USD)") +
theme(plot.title=element_text(size=15, face="bold", hjust=0.5),
axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12, angle=90), legend.position="null") +
coord_cartesian(ylim=c(0,60000))
ggplot(usd.amounts, aes(log(amount+1), fill=type)) +
geom_histogram(alpha=0.5, position="identity") +
ggtitle("Distribution of log(USD Pledged) vs. log(USD Goal)") + xlab("log(USD + 1)") +
ylab("Frequency") + scale_fill_discrete("Type", labels=c("USD Pledged", "USD Goal"))
ggplot(state.pct, aes(main_category, pct, fill=state)) + geom_bar(stat="identity") +
ggtitle("Success vs. Failure Rate by Project Category") +
xlab("Project Category") + ylab("Percentage") + scale_y_continuous(labels=scales::percent) +
scale_fill_discrete(name="Project Status", breaks=c("successful", "failed"),
labels=c("Success", "Failure")) +
geom_text(aes(label=paste0(round(pct*100,1),"%")), position=position_stack(vjust=0.5),
colour="white", size=5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12), legend.position="bottom",
legend.title=element_text(size=12, face="bold")) + coord_flip()
ggplot(projYear, aes(launch_year, count, fill=count)) + geom_bar(stat="identity") +
ggtitle("Projects per Year") + xlab("Year") +
ylab("# of Projects") + scale_x_discrete(limits=c(2009:2018)) +
geom_text(aes(label=paste0(count)), vjust=-0.5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12), legend.position="null") +
scale_fill_gradient(low="skyblue1", high="royalblue4")
ggplot(state.pct2, aes(year, pct, fill=state)) + geom_bar(stat="identity") +
ggtitle("Success vs. Failure Rate by Year Launched") +
xlab("Year") + ylab("Percentage") + scale_x_discrete(limits=c(2009:2017)) +
scale_y_continuous(labels=scales::percent) +
scale_fill_discrete(name="Project Status", breaks=c("successful", "failed"),
labels=c("Success", "Failure")) +
geom_text(aes(label=paste0(round(pct*100,1),"%")), position=position_stack(vjust=0.5),
colour="white", size=5) + theme_economist() +
theme(plot.title=element_text(hjust=0.5), axis.title=element_text(size=12, face="bold"),
axis.text.x=element_text(size=12), legend.position="bottom",
legend.title=element_text(size=12, face="bold"))
heatmap.2(cat.year2, dendrogram="row", Colv=F, trace="none", margins=c(10,10))
mapCountryData(countries.match, nameColumnToPlot="count",
mapTitle="Number of Projects by Country", catMethod="logFixedWidth",
colourPalette="heat")
readRDS("EPIC.hg38.manifest.rds")
nrc <- get_sentiments("nrc") ##save nrc dictionary as df
source('~/R/SAHeist.R', echo=TRUE)
library(genius)
install.packages("genius")
library(genius)
library(tidyverse)
library(corpus)
library(corpus)
install.packages("corpus")
library(tidytext)
library(scales)
library(ggthemes)
library(DT)
install.packages("DT")
library(tm)
install.packages("tm")
install.packages("SnowballC")
source('~/R/olympicsPractice.R', echo=TRUE)
source('~/R/olympicsPractice.R', echo=TRUE)
ggplot(olympics) +
geom_point(aes(year, seconds, color = country)) +
ylim(0,12) +
scale_x_continuous(breaks = seq(1896,2016, 12))
ggplot(olympics) +
geom_point(aes(year, seconds, color = country)) +
ylim(0,12) +
scale_x_continuous(breaks = seq(1896,2016, 12)) +
geom_smooth(method="lm", formula=seconds~year)
ggplot(olympics) +
geom_point(aes(year, seconds, color = country)) +
ylim(0,12) +
scale_x_continuous(breaks = seq(1896,2016, 12)) +
geom_smooth(method="lm", formula=y~x)
ggplot(olympics, aes(year,seconds)) +
geom_point(aes(color = country)) +
ylim(0,12) +
scale_x_continuous(breaks = seq(1896,2016, 12)) +
geom_smooth(method="lm", formula=y~x)
ggplot(olympics, aes(year,seconds)) +
geom_point(aes(color = country)) +
ylim(0,12) +
scale_x_continuous(breaks = seq(1896,2016, 12)) +
geom_smooth(method="lm", se=FALSE, formula=y~x)
install.packages("rmarkdown")
library(rmarkdown)
hello
source('~/R/olympicsPractice.R', echo=TRUE)
source('~/R/SAHeist.R', echo=TRUE)
source('~/R/SAHeist.R', echo=TRUE)
View(all_song_sentiments)
View(list_albums)
View(list_albums_not_lem)
View(light)
View(taboo_sents)
source('~/R/SAHeist.R', echo=TRUE)
taboo <- sent_all_albums %>% filter (album == "TA13OO")
View(taboo)
taboo_sents <- taboo %>% group_by(sentiment, track_title) %>% summarise(Freq=n()) %>% spread(sentiment, Freq)
View(taboo)
View(sums)
View(taboo)
heist <- read.table(file = "theheist.xlsx", sep = "\t", header=TRUE)
library(readxl)
theheist <- read_excel("theheist.xlsx")
View(theheist)
dfheist <- merge(theheist, nrc, by = "word")
dfheist <- merge(theheist, nrc, by = "X_1")
dfheist <- merge(theheist, nrc, by = "X_+1")
dfheist <- merge(theheist, nrc, by = "X__1")
dfheist <- merge(theheist, nrc, by = "X__1")
dfheist <- merge(theheist, nrc, by = "word")
dfheist <- merge(theheist, nrc, by = "words")
colnames(theheist) <- c['word', 'count']
colnames(theheist) <- "word"
colnames(theheist) <- c("word", 'wor', 'w')
colnames(theheist) <- c("num", 'word', 'count')
dfheist <- merge(theheist, nrc, by = "word")
View(dfheist)
View(sent_all_albums)
heist_sent <- dfheist %>%
group_by(sentiment, track_title) %>% summarise(Freq=n()) %>% spread(sentiment, Freq)
heist_sent <- dfheist %>%
group_by(sentiment, count) %>% summarise(Freq=n()) %>% spread(sentiment, Freq)
View(heist_sent)
heist_sent <- dfheist %>%
group_by(sentiment, word) %>% summarise(Freq=n()) %>% spread(sentiment, Freq)
View(heist_sent)
heist_sent <- dfheist %>%
group_by(sentiment, word, count) %>% summarise(Freq=n()) %>% spread(sentiment, Freq)
View(heist_sent)
theheist.head()
head(theheist,5)
testheist <- head(theheist,5)
testdfheist <- merge(testheist, nrc, by = "word")
View(testdfheist)
write.xlsx(heist_sent, file, sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(heist_sent, file, sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(heist_sent, file, sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(heist_sent, "finalone", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
write.xlsx(heist_sent, "finalone.xlsx", sheetName="Sheet1",
col.names=TRUE, row.names=TRUE, append=FALSE, showNA=TRUE, password=NULL)
source('~/R/SAHeist.R', echo=TRUE)
source('~/R/SAHeist.R', echo=TRUE)
View(heist_sent)
View(heist_sent)
View(theheist)
source('~/R/SAHeist.R', echo=TRUE)
View(nrc)
source('~/R/SAHeist.R', echo=TRUE)
View(dfheist)
View(heist_sent)
source('~/R/SAHeist.R', echo=TRUE)
View(heist_sent)
# words are grouped together then smushed together with each sentiment as a column of NA or 1
heist_sent <- dfheist %>%
group_by(sentiment, word, count)  %>% spread(sentiment, Freq)
View(nrc)
View(theheist)
IQR(data)
data <- c(69,84,52,93 , 81  ,74 , 89  ,85 , 88  ,63 , 87,  64,  67  ,72 , 74  ,55 , 82,  91 , 68  ,77)
IQR(data)
source('~/.active-rstudio-document', echo=TRUE)
# 50, 89
# iqr is 39
print(50 - 39*1.5)
# 50, 89
# iqr is 39
print(89 + 39*1.5)
data3 <- c(79 , 74  ,42 , 88,  81,  64  ,98,  78  ,85 , 53  ,77  ,66
,76  ,52 , 80  ,60 , 77  ,90  ,86  ,77 )
sort(data3)
data3 <- sort(data3)
data3
data3.summary()
length(data3)
data3 <- c(79 , 74  ,42 , 88,  81,  64  ,98,  78  ,85 , 53  ,77  ,66
,76  ,52 , 80  ,60 , 77  ,90  ,86  ,77 )
summary(data3)
data4 <- c(7, 5, 11, 8, 14, 19, 16, 15, 13, 27)
var(data4)
6.1032778078669*6.1032778078669
data3 <- c(69,  70  ,69 , 76,  70,  68  ,71 , 73,  73, 66,  65,  73,  69,  69,  70,
71, 71 , 72  ,67 , 68  ,74 , 69,  67,  75,  71 )
summary(data3)
sort(data3)
20+40+  31+  7  +15 + 29+  25+  20  +17 +   32  +28 + 12  +34 + 29  +20 + 17+  33+    23+  37+  31
500/20
>pbinom(7, 12, 0.3)
pbinom(7, 12, 0.3)
pbinom(9, 15, 0.5)
pbinom(11, 15, 0.5) - pbinom(5, 15, 0.5)
dbinom(4, 5, 0.2)
dhyper(4, 5, 8, 20)
dhyper(4,5, 8, 20)
dhyper(4, 5, 12, 20)
dhyper(4, 8, 12, 5)
dhyper(5, 8, 12, 5)
dhyper(5, 8, 12, 5) + dhyper(4, 8, 12, 5)
dhyper(2, 25, 75, 10)
dbinom(2, 10, 0.25)
pbinom(2, 1000, 0.002)
ppois(2, 2)
pgeom(1, 0.1)
pgeom(16, 0.1)
1-pgeom(16, 0.1)
dbinom(1, 10, 0.2)
pbinom(2, 10, 0.2)
1- pbinom(2, 10, 0.2)
print(val)
for (val in 1:10) {
print(val)
}
install.packages("primes")
generate_primes(max =12)
source('~/R/mathviz.R', echo=TRUE)
arr <- generate_primes(max =12)
print(var)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
source('~/R/mathviz.R', echo=TRUE)
DecToBin(var)
DecToBin(c(17,25))
source('~/R/mathviz.R', echo=TRUE)
qnorm(0.3, 527, 120)
pnorm(700, 527, 120)
1- pnorm(700, 527, 120)
pnorm(600, 527, 120) - pnorm(400, 527, 120)
pnorm(650, 527, 120)
pgamma(2,1,1/5)
pgamma(3,1,1/5) - pgamma(1,1,1/5)
qgamma(0.8,1,1/5)
install.packages("shiny")
runapp("~/shinyap")
runapp("~/shinyapp")
runApp("~/shinyapp")
shiny::runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
mpgData$cyl
mpgData <- mtcars
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
View(mpgData)
runApp('firstShiny')
runApp('firstShiny')
print(source("app.R"))
print(source("test.R"))
print(source("firstShiny"))
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
shiny::runApp('firstShiny')
shinyApp(ui, server)
shiny::runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
mpgData <- mtcars
View(mpgData)
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
runApp('firstShiny')
runApp('firstShiny')
plot(mpgData$mpg, input$variable)
# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
# Compute the formula text ----
# This is in a reactive expression since it is shared by the
# output$caption and output$mpgPlot functions
formulaText <- reactive({
paste("mpg ~", input$variable)
})
# Return the formula text for printing as a caption ----
output$caption <- renderText({
formulaText()
})
# Generate a plot of the requested variable against mpg ----
# and only exclude outliers if requested
output$mpgPlot <- renderPlot({
plot(mpgData$mpg, input$variable)
})
}
runApp('firstShiny')
runApp('firstShiny')
library(shiny)
source('~/R/server.R', echo=TRUE)
runE
runApp('~/test_app')
runApp('~/firstShiny
')
runApp('~/firstShiny')
cd
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny', display.mode = "showcase")
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
shiny::runApp('firstShiny')
shiny::runApp('firstShiny')
shiny::runApp('firstShiny')
# generate fibonacci table
fib <- numeric(10)
fib[1] <- 1
fib[2] <- 1
for (i in 3:10) {
fib[i] <- fib[i-1] + fib[i-2]
}
print(fib)
shiny::runApp('firstShiny')
runApp('firstShiny')
runApp('firstShiny')
# generate fibonacci table
len <- 1000
fib <- numeric(len)
fib[1] <- 1
fib[2] <- 1
for (i in 3:len) {
fib[i] <- fib[i-1] + fib[i-2]
}
runApp('firstShiny')
runApp('firstShiny')
typeof(mpgData$mpg)
mpgData <- mtcars
mpgData$am <- factor(mpgData$am, labels = c("Automatic", "Manual"))
typeof(mpgData$mpg)
typeof(fib)
runApp('firstShiny')
runApp('firstShiny')
a <- c(1:1000)
runApp('firstShiny')
runApp('firstShiny')
install.packages("plotly")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
